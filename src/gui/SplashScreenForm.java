/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JComponent;
import javax.swing.plaf.basic.BasicProgressBarUI;

/**
 *
 * @author Stefan
 */
public class SplashScreenForm extends javax.swing.JPanel {

    private OnBaraCompletata onBaraCompletata;

    /**
     * Creates new form SplashScreenRapoarte
     */
    public SplashScreenForm() {
        initComponents();
    //    progressBar.setUI(new FancyProgressBar());
        progressBar.setBackground(new Color(255, 255, 255));
        //progressBar.setValue(40);
        Thread th = new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 0;
                progressBar.setMaximum(500);
                while (i <= 500) {
                    progressBar.setValue(i);
                    try {
                        Thread.sleep(7);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SplashScreenForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    i = i + 1;
                }
                onBaraCompletata.executeOnBaraCompletata();
            }
        });
        System.out.println("INCEP THREADUL1");
        th.start();
    }

    @Override
    protected void paintComponent(Graphics gr) {
        super.paintComponent(gr); //To change body of generated methods, choose Tools | Templates.
        Graphics2D g = (Graphics2D) gr;
        g.setColor(new Color(255, 255, 255));
        g.fillRect(0, -20, 800, 600);

        try {
            BufferedImage imagine = ImageIO.read(new File("src/resources/logoAplicatie.png"));
            g.drawImage(imagine, 195, 20, 300, 300, null);
        } catch (IOException ex) {
            Logger.getLogger(SplashScreenForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public interface OnBaraCompletata {

        void executeOnBaraCompletata();

    }

    public void setOnBaraCompletata(OnBaraCompletata onBaraCompletata) {
        this.onBaraCompletata = onBaraCompletata;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();

        progressBar.setValue(50);
        progressBar.setPreferredSize(new java.awt.Dimension(82, 10));
        progressBar.setStringPainted(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(334, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
        );
    }// </editor-fold>//GEN-END:initComponents

    class FancyProgressBar extends BasicProgressBarUI {

        @Override
        protected void paintDeterminate(Graphics g, JComponent c) {

            Graphics2D g2d = (Graphics2D) g.create();

            int iStrokWidth = 2;
            g2d.setStroke(new BasicStroke(iStrokWidth));
            g2d.setColor(new Color(0, 0, 0));

            int width = progressBar.getWidth();
            int height = progressBar.getHeight();

            Rectangle2D outline = new Rectangle2D.Double(iStrokWidth / 2, iStrokWidth / 2, width - iStrokWidth, height - iStrokWidth);

            g2d.draw(outline);

            int iInnerHeight = height - (iStrokWidth * 4);
            int iInnerWidth = width - (iStrokWidth * 4);

            double dProgress = progressBar.getPercentComplete();
            if (dProgress < 0) {
                dProgress = 0;
            } else if (dProgress > 1) {
                dProgress = 1;
            }

            iInnerWidth = (int) Math.round(iInnerWidth * dProgress);

            g2d.setPaint(new Color(0, 0, 0));

            Rectangle2D rect = new Rectangle2D.Double(iStrokWidth * 2, iStrokWidth * 2, 1, iInnerHeight);

         //   g2d.fill(rect);
            g2d.dispose();
        }

        @Override
        protected void paintIndeterminate(Graphics g, JComponent c) {
            super.paintIndeterminate(g, c); //To change body of generated methods, choose Tools | Templates.
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
